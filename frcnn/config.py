from keras import backend as K
import math


class Config:

    def __init__(self):
        self.verbose = True
        self.network = 'resnet50'
        # setting for data augmentation
        self.use_horizontal_flips = False
        self.use_vertical_flips = False
        self.rotate = False

        # anchor box scales
        self.anchor_scales = [128, 256, 512]

        # anchor box ratios
        self.anchor_ratios = [[1, 1], [1. / math.sqrt(2), 2. / math.sqrt(2)],
                                  [2. / math.sqrt(2), 1. / math.sqrt(2)]]

        # size to resize the smallest side of the image
        self.image_min_size = 600

        # image channel-wise mean to subtract (BGR)
        self.image_channel_mean = [103.939, 116.779, 123.68]
        # ???
        self.image_scaling_factor = 1.0

        # number of ROIs at once
        self.num_rois = 4

        # stride at the RPN (this depends on the network configuration)
        self.rpn_stride = 16

        self.balance_classes = False

        # scaling the stdev???
        self.std_scaling = 4.0
        self.classifier_regr_std = [8.0, 8.0, 4.0, 4.0]

        # overlaps for RPN
        self.rpn_min_overlap = 0.3
        self.rpn_max_overlap = 0.7

        # overlaps for ROIs
        self.rcnn_min_overlap = 0.1
        self.rcnn_max_overlap = 0.5

        # placeholder for the class mapping, automatically generated by the parser
        self.class_name_idx_mapping = None

        # location of pretrained weights for the base network
        # weight files can be found at:
        # https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5
        self.base_net_weight_path = None

        # output model weight path
        self.model_weight_path = None
